{"ast":null,"code":"import { AuthRequest } from \"../models/authRequest.model\";\nimport { BehaviorSubject, of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthenticationService {\n  constructor(http) {\n    this.http = http;\n    this.backendHost = \"http://localhost:8080\";\n    this.booleanValue = new BehaviorSubject(false);\n  }\n  login(email, password) {\n    let url = `${this.backendHost}/authentication/authenticate`;\n    let request = new AuthRequest();\n    request.email = email;\n    request.password = password;\n    return this.http.post(url, request);\n  }\n  register(registerRequest) {\n    let url = `${this.backendHost}/authentication/register`;\n    return this.http.post(url, registerRequest);\n  }\n  getDecodeToken() {\n    return of(this.decodedToken);\n  }\n  setDecodedToken(newDecodeToken) {\n    this.decodedToken = newDecodeToken;\n  }\n  getBooleanValue() {\n    return this.booleanValue.asObservable();\n  }\n  setBooleanValue(newValue) {\n    this.booleanValue.next(newValue);\n  }\n  logout() {\n    let url = `${this.backendHost}/authentication/logout`;\n    localStorage.removeItem(\"token\");\n    this.http.post(url, {}).subscribe({\n      next: data => {\n        console.log(data);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n}\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAQA,WAAW,QAAO,6BAA6B;AACvD,SAAQC,eAAe,EAAmBC,EAAE,QAAO,MAAM;;;AAOzD,OAAM,MAAOC,qBAAqB;EAKhCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHxB,gBAAW,GAAW,uBAAuB;IACrC,iBAAY,GAAG,IAAIJ,eAAe,CAAU,KAAK,CAAC;EAElB;EAEjCK,KAAK,CAACC,KAAa,EAAEC,QAAgB;IAC1C,IAAIC,GAAG,GAAW,GAAG,IAAI,CAACC,WAAW,8BAA8B;IACnE,IAAIC,OAAO,GAAgB,IAAIX,WAAW,EAAE;IAC5CW,OAAO,CAACJ,KAAK,GAAGA,KAAK;IACrBI,OAAO,CAACH,QAAQ,GAAGA,QAAQ;IAC3B,OAAO,IAAI,CAACH,IAAI,CAACO,IAAI,CAAeH,GAAG,EAACE,OAAO,CAAC;EAClD;EAGOE,QAAQ,CAACC,eAAgC;IAC9C,IAAIL,GAAG,GAAW,GAAG,IAAI,CAACC,WAAW,0BAA0B;IAC/D,OAAO,IAAI,CAACL,IAAI,CAACO,IAAI,CAAeH,GAAG,EAACK,eAAe,CAAC;EAC1D;EAEOC,cAAc;IACnB,OAAOb,EAAE,CAAC,IAAI,CAACc,YAAY,CAAC;EAC9B;EAEOC,eAAe,CAACC,cAAmB;IACxC,IAAI,CAACF,YAAY,GAAGE,cAAc;EACpC;EAEAC,eAAe;IACb,OAAO,IAAI,CAACC,YAAY,CAACC,YAAY,EAAE;EACzC;EAEAC,eAAe,CAACC,QAAiB;IAC/B,IAAI,CAACH,YAAY,CAACI,IAAI,CAACD,QAAQ,CAAC;EAClC;EAGOE,MAAM;IACX,IAAIhB,GAAG,GAAW,GAAG,IAAI,CAACC,WAAW,wBAAwB;IAC7DgB,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACtB,IAAI,CAACO,IAAI,CAACH,GAAG,EAAC,EAAE,CAAC,CAACmB,SAAS,CAAC;MAC/BJ,IAAI,EAAEK,IAAI,IAAG;QACXC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACnB,CAAC;MACDG,KAAK,EAAEC,GAAG,IAAG;QACXH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC;MAClB;KACD,CAAC;EACJ;;AAjDW9B,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;SAArBA,qBAAqB;EAAA+B,SAArB/B,qBAAqB;EAAAgC,YAFpB;AAAM","names":["AuthRequest","BehaviorSubject","of","AuthenticationService","constructor","http","login","email","password","url","backendHost","request","post","register","registerRequest","getDecodeToken","decodedToken","setDecodedToken","newDecodeToken","getBooleanValue","booleanValue","asObservable","setBooleanValue","newValue","next","logout","localStorage","removeItem","subscribe","data","console","log","error","err","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hp\\OneDrive\\Desktop\\Nouveau dossier (5)\\mini-projet-front\\mini-projet-front\\src\\app\\services\\authentication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {AuthRequest} from \"../models/authRequest.model\";\r\nimport {BehaviorSubject, Observable, map, of} from \"rxjs\";\r\nimport {AuthResponse} from \"../models/authResponse.model\";\r\nimport {RegisterRequest} from \"../models/RegisterRequest.model\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n  decodedToken:any;\r\n  backendHost: string = \"http://localhost:8080\";\r\n  private booleanValue = new BehaviorSubject<boolean>(false);\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public login(email: string, password: string): Observable<AuthResponse> {\r\n    let url: string = `${this.backendHost}/authentication/authenticate`;\r\n    let request: AuthRequest = new AuthRequest();\r\n    request.email = email;\r\n    request.password = password;\r\n    return this.http.post<AuthResponse>(url,request);\r\n  }\r\n\r\n\r\n  public register(registerRequest: RegisterRequest)  {\r\n    let url: string = `${this.backendHost}/authentication/register`;\r\n    return this.http.post<AuthResponse>(url,registerRequest)\r\n  }\r\n\r\n  public getDecodeToken() {\r\n    return of(this.decodedToken);\r\n  }\r\n\r\n  public setDecodedToken(newDecodeToken: any) {\r\n    this.decodedToken = newDecodeToken;\r\n  }\r\n\r\n  getBooleanValue() {\r\n    return this.booleanValue.asObservable();\r\n  }\r\n\r\n  setBooleanValue(newValue: boolean) {\r\n    this.booleanValue.next(newValue);\r\n  }\r\n\r\n\r\n  public logout(){\r\n    let url: string = `${this.backendHost}/authentication/logout`;\r\n    localStorage.removeItem(\"token\");\r\n    this.http.post(url,{}).subscribe({\r\n      next: data => {\r\n        console.log(data);\r\n      },\r\n      error: err => {\r\n        console.log(err)\r\n      }\r\n    });\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}