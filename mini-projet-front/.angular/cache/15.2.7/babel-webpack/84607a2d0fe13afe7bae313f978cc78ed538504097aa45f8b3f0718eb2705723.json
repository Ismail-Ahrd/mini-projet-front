{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PrelevementService {\n  constructor(http) {\n    this.http = http;\n    this.backendHost = \"http://localhost:8080\";\n  }\n  getAllPrelevement(keyword, etat, page, size) {\n    let url = `${this.backendHost}/prelevement/personne?keyword=${keyword}&page=${page}&size=${size}&etat=${etat}`;\n    const token = localStorage.getItem(\"token\");\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      })\n    };\n    return this.http.get(url, httpOptions);\n  }\n  savePrelevement(prelevement) {\n    let url = `${this.backendHost}/prelevement`;\n    const token = localStorage.getItem(\"token\");\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      })\n    };\n    return this.http.post(url, prelevement, httpOptions);\n  }\n  deletePrelevement(id) {\n    const token = localStorage.getItem(\"token\");\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      })\n    };\n    return this.http.delete(`${this.backendHost}/prelevement/${id}`, httpOptions);\n  }\n  getPrelevementById(id) {\n    let url = `${this.backendHost}/prelevement/${id}`;\n    const token = localStorage.getItem(\"token\");\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      })\n    };\n    return this.http.get(url, httpOptions);\n  }\n}\nPrelevementService.ɵfac = function PrelevementService_Factory(t) {\n  return new (t || PrelevementService)(i0.ɵɵinject(i1.HttpClient));\n};\nPrelevementService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PrelevementService,\n  factory: PrelevementService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;;;AAQ5D,OAAM,MAAOC,kBAAkB;EAE7BC,YAAoBC,IAAiB;IAAjB,SAAI,GAAJA,IAAI;IADxB,gBAAW,GAAW,uBAAuB;EACJ;EAElCC,iBAAiB,CAACC,OAAe,EAAEC,IAAY,EAC7BC,IAAY,EAAEC,IAAY;IACjD,IAAIC,GAAG,GACL,GAAG,IAAI,CAACC,WAAW,iCAAiCL,OAAO,SAASE,IAAI,SAASC,IAAI,SAASF,IAAI,EAAE;IACtG,MAAMK,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIf,WAAW,CAAC;QACvB,cAAc,EAAG,kBAAkB;QACnC,eAAe,EAAE,SAAS,GAAGW;OAC9B;KACF;IACD,OAAO,IAAI,CAACR,IAAI,CAACa,GAAG,CAAsBP,GAAG,EAAEK,WAAW,CAAC;EAC7D;EAEOG,eAAe,CAACC,WAAyB;IAC9C,IAAIT,GAAG,GAAW,GAAG,IAAI,CAACC,WAAW,cAAc;IACnD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIf,WAAW,CAAC;QACvB,cAAc,EAAG,kBAAkB;QACnC,eAAe,EAAE,SAAS,GAAGW;OAC9B;KACF;IACD,OAAO,IAAI,CAACR,IAAI,CAACgB,IAAI,CAACV,GAAG,EAAES,WAAW,EAAEJ,WAAW,CAAC;EACtD;EAEOM,iBAAiB,CAACC,EAAU;IACjC,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIf,WAAW,CAAC;QACvB,cAAc,EAAG,kBAAkB;QACnC,eAAe,EAAE,SAAS,GAAGW;OAC9B;KACF;IACD,OAAO,IAAI,CAACR,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACZ,WAAW,gBAAgBW,EAAE,EAAE,EAAEP,WAAW,CAAC;EAC/E;EAEOS,kBAAkB,CAACF,EAAU;IAClC,IAAIZ,GAAG,GAAW,GAAG,IAAI,CAACC,WAAW,gBAAgBW,EAAE,EAAE;IACzD,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIf,WAAW,CAAC;QACvB,cAAc,EAAG,kBAAkB;QACnC,eAAe,EAAE,SAAS,GAAGW;OAC9B;KACF;IACD,OAAO,IAAI,CAACR,IAAI,CAACa,GAAG,CAAcP,GAAG,EAAEK,WAAW,CAAC;EACrD;;AAnDWb,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAuB,SAAlBvB,kBAAkB;EAAAwB,YAFjB;AAAM","names":["HttpHeaders","PrelevementService","constructor","http","getAllPrelevement","keyword","etat","page","size","url","backendHost","token","localStorage","getItem","httpOptions","headers","get","savePrelevement","prelevement","post","deletePrelevement","id","delete","getPrelevementById","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\P15S 1\\Desktop\\fronte\\mini-projet-front\\mini-projet-front\\src\\app\\services\\prelevement.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\r\nimport {Observable} from \"rxjs\";\r\nimport {Prelevement, PrelevementResponse} from \"../models/prelevement.model\";\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PrelevementService {\r\n  backendHost: string = \"http://localhost:8080\";\r\n  constructor(private http : HttpClient) { }\r\n\r\n  public getAllPrelevement(keyword: string, etat: string,\r\n                           page: number, size: number): Observable<PrelevementResponse> {\r\n    let url: string =\r\n      `${this.backendHost}/prelevement/personne?keyword=${keyword}&page=${page}&size=${size}&etat=${etat}`;\r\n    const token = localStorage.getItem(\"token\");\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type':  'application/json',\r\n        'Authorization': 'Bearer ' + token\r\n      })\r\n    };\r\n    return this.http.get<PrelevementResponse>(url, httpOptions);\r\n  }\r\n\r\n  public savePrelevement(prelevement:  Prelevement) {\r\n    let url: string = `${this.backendHost}/prelevement`;\r\n    const token = localStorage.getItem(\"token\");\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type':  'application/json',\r\n        'Authorization': 'Bearer ' + token\r\n      })\r\n    };\r\n    return this.http.post(url, prelevement, httpOptions);\r\n  }\r\n\r\n  public deletePrelevement(id: number) {\r\n    const token = localStorage.getItem(\"token\");\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type':  'application/json',\r\n        'Authorization': 'Bearer ' + token\r\n      })\r\n    };\r\n    return this.http.delete(`${this.backendHost}/prelevement/${id}`, httpOptions);\r\n  }\r\n\r\n  public getPrelevementById(id: number) {\r\n    let url: string = `${this.backendHost}/prelevement/${id}`;\r\n    const token = localStorage.getItem(\"token\");\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type':  'application/json',\r\n        'Authorization': 'Bearer ' + token\r\n      })\r\n    };\r\n    return this.http.get<Prelevement>(url, httpOptions);\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}